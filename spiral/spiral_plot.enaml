from enaml.layout.api import align, hbox, vbox, spacer
from enaml.widgets.api import (
    CheckBox, Container, ComboBox, FileDialogEx, Form, GroupBox, Label,
    MainWindow, PushButton
)
from traits_enaml.widgets.enable_canvas import EnableCanvas

from range import Range


enamldef SpiralWindow(MainWindow): window:
    attr model

    title = 'Spiral'

    Container:
        constraints = [
            hbox(spiral, vbox(form, spacer)),
            align('left', num_shapes.slider, num_cycles.slider,
                  max_radius.slider, min_count.slider, max_count.slider,
                  start_scale.slider, end_scale.slider),
            align('right', num_shapes.slider, num_cycles.slider,
                  max_radius.slider, min_count.slider, max_count.slider,
                  start_scale.slider, end_scale.slider),
            spiral.width >= 500,
            spiral.height >= 500,
        ]
        EnableCanvas: spiral:
            component << model.component

        GroupBox: form:
            Label:
                text = "Quantity:"
            Range: num_shapes:
                minimum = 10.0
                maximum = 200.0
                value := model.num_shapes
            Label:
                text = "Cycle Count:"
            Range: num_cycles:
                minimum = 1.0
                maximum = 10.0
                value := model.num_cycles
            Label:
                text = "Maximum Radius:"
            Range: max_radius:
                minimum = 3.0
                maximum = 15.0
                value := model.max_radius
            Label:
                text = "Minimum Line Count:"
            Range: min_count:
                minimum = 1.0
                maximum = 15.0
                value := model.min_count
            Label:
                text = "Maximum Line Count:"
            Range: max_count:
                minimum = 1.0
                maximum = 15.0
                value := model.max_count
            Label:
                text = "Start Scale:"
            Range: start_scale:
                minimum = 1.0
                maximum = 4.0
                value := model.start_scale
            Label:
                text = "End Scale:"
            Range: end_scale:
                minimum = 1.0
                maximum = 4.0
                value := model.end_scale
            Form:
                Label:
                    text = 'Inverted:'
                CheckBox: inverted:
                    checked := model.inverted
                Label:
                    text = 'Wireframe:'
                CheckBox: no_fill:
                    checked := model.no_fill
                Label:
                    text = "Shape:"
                ComboBox: shape:
                    items = model.component.shape_choices
                    index = 0
                    selected_item >> model.shape
            PushButton: save:
                text = "Save"
                clicked ::
                    path = FileDialogEx.get_save_file_name(window)
                    if path:
                        model.save(path)
